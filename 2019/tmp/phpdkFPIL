name: ChatLogin
main: ChatLogin\Main
version: 1.0
api: [1.14.0]
load: STARTUP
author: BulutMCPE,FleetHD
description: ServerAuth ile uyumlu sohbet sistemi!

commands:
 chatlogin:
  aliases: [chlogin]
  description: ChatLogin Komutları.
  permission: chatlogin

permissions:
 chatlogin:
  default: op
  description: ChatLogin Komutlara erişim.
  children:
   chatlogin.help:
    default: op
    description: ChatLogin Yardım sayfasına erişim.
   chatlogin.info:
    default: op
    description: ChatLogin hakkında bilgiye erişim.
   chatlogin.reload:
    default: op
    description: ChatLogin yenilemeye erişim.
   chatlogin.register:
    default: true
    description: ChatLogin kayıt olmaya erişim.
   chatlogin.login:
    default: true
    description: ChatLogin giriş yapmaya erişim.<?php

/*
 * ChatLogin (v1.4) by EvolSoft
 * Developer: EvolSoft (Flavius12)
 * Website: http://www.evolsoft.tk
 * Date: 17/01/2015 10:21 AM (UTC)
 * Copyright & License: (C) 2015-2016 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/ChatLogin/blob/master/LICENSE)
 */

namespace ChatLogin;

use pocketmine\command\CommandExecutor;
use pocketmine\command\CommandSender;
use pocketmine\plugin\PluginBase;
use pocketmine\Server;
use pocketmine\utils\Config;
use pocketmine\utils\TextFormat;

use ServerAuth\ServerAuth;

class Main extends PluginBase {
	
	//About Plugin Const
	
	/** @var string PRODUCER Plugin producer */
	const PRODUCER = "EvolSoft";
	
	/** @var string VERSION Plugin version */
	const VERSION = "1.4";
	
	/** @var string MAIN_WEBSITE Plugin producer website */
	const MAIN_WEBSITE = "http://www.evolsoft.tk";
	
	//Other Const
	
	/** @var string PREFIX Plugin prefix */
	const PREFIX = "&c[Turk&fMCPE] ";
	
	/** @var array $confirm_users User awaiting confirmation */
	public $confirm_users = array();
    
    /**
     * Translate Minecraft colors
     * 
     * @param char $symbol Color symbol
     * @param string $message The message to be translated
     * 
     * @return string The translated message
     */
    public function translateColors($symbol, $message){
    
    	$message = str_replace($symbol."0", TextFormat::BLACK, $message);
    	$message = str_replace($symbol."1", TextFormat::DARK_BLUE, $message);
    	$message = str_replace($symbol."2", TextFormat::DARK_GREEN, $message);
    	$message = str_replace($symbol."3", TextFormat::DARK_AQUA, $message);
    	$message = str_replace($symbol."4", TextFormat::DARK_RED, $message);
    	$message = str_replace($symbol."5", TextFormat::DARK_PURPLE, $message);
    	$message = str_replace($symbol."6", TextFormat::GOLD, $message);
    	$message = str_replace($symbol."7", TextFormat::GRAY, $message);
    	$message = str_replace($symbol."8", TextFormat::DARK_GRAY, $message);
    	$message = str_replace($symbol."9", TextFormat::BLUE, $message);
    	$message = str_replace($symbol."a", TextFormat::GREEN, $message);
    	$message = str_replace($symbol."b", TextFormat::AQUA, $message);
    	$message = str_replace($symbol."c", TextFormat::RED, $message);
    	$message = str_replace($symbol."d", TextFormat::LIGHT_PURPLE, $message);
    	$message = str_replace($symbol."e", TextFormat::YELLOW, $message);
    	$message = str_replace($symbol."f", TextFormat::WHITE, $message);
    
    	$message = str_replace($symbol."k", TextFormat::OBFUSCATED, $message);
    	$message = str_replace($symbol."l", TextFormat::BOLD, $message);
    	$message = str_replace($symbol."m", TextFormat::STRIKETHROUGH, $message);
    	$message = str_replace($symbol."n", TextFormat::UNDERLINE, $message);
    	$message = str_replace($symbol."o", TextFormat::ITALIC, $message);
    	$message = str_replace($symbol."r", TextFormat::RESET, $message);
    
    	return $message;
    }
    
    public function onEnable(){
	    @mkdir($this->getDataFolder());
        $this->saveDefaultConfig();
        $this->logger = Server::getInstance()->getLogger();
        if($this->getServer()->getPluginManager()->getPlugin("ServerAuth")){
    		if(ServerAuth::getAPI()->getAPIVersion() == "1.1.1"){
    			$this->logger->info($this->translateColors("&", Main::PREFIX . "&aPlugin Enabled!"));
    			$this->getCommand("chatlogin")->setExecutor(new Commands\Commands($this));
    			$this->getServer()->getPluginManager()->registerEvents(new EventListener($this), $this);
    		}else{
    			$this->logger->error($this->translateColors("&", Main::PREFIX . "&cPlease use ServerAuth (API 1.1.1). Plugin Disabled!"));
    		}
        }else{
        	$this->logger->error($this->translateColors("&", Main::PREFIX . "&cPlease install ServerAuth (API 1.1.1). Plugin Disabled!"));
        }
    }
}
?><?php

/*
 * ChatLogin (v1.4) by EvolSoft
 * Developer: EvolSoft (Flavius12)
 * Website: http://www.evolsoft.tk
 * Date: 17/01/2015 12:12 AM (UTC)
 * Copyright & License: (C) 2015-2016 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/ChatLogin/blob/master/LICENSE)
 */

namespace ChatLogin\Commands;

use pocketmine\command\Command;
use pocketmine\command\CommandExecutor;
use pocketmine\command\CommandSender;
use pocketmine\permission\Permission;
use pocketmine\Player;
use pocketmine\plugin\PluginBase;
use pocketmine\Server;
use pocketmine\utils\Config;

use ChatLogin\Main;

class Commands extends PluginBase implements CommandExecutor {
	
	public function __construct(Main $plugin){
        $this->plugin = $plugin;
    }
    
    public function onCommand(CommandSender $sender, Command $cmd, $label, array $args) {
    	$fcmd = strtolower($cmd->getName());
    	switch($fcmd){
    			case "chatlogin":
    				if(isset($args[0])){
    			   		$args[0] = strtolower($args[0]);
    			   		if($args[0]=="reload"){
    			   			if($sender->hasPermission("chatlogin.reload")) {
    			   				$this->plugin->reloadConfig();
    			   				$sender->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&aConfiguration Reloaded."));
    			   				return true;
    			   			}else{
    			   				$sender->sendMessage($this->plugin->translateColors("&", "&cYou don't have permissions to use this command"));
    			   				return true;
    			   			}
    			   		}elseif($args[0]=="info"){
    			   			if($sender->hasPermission("chatlogin.info")) {
    			   				$sender->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&7ChatLogin &bv" . Main::VERSION . " &7developed by&b " . Main::PRODUCER));
    			   				$sender->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&7Website &b" . Main::MAIN_WEBSITE));
    			   				return true;
    			   			}else{
    			   				$sender->sendMessage($this->plugin->translateColors("&", "&cYou don't have permissions to use this command"));
    			   				return true;
    			   			}
    			   		}else{
    			   			if($sender->hasPermission("chatlogin")){
    			   				$sender->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&cSubcommand &9" . $args[0] . "&c not found. Use &9/chlogin &cto show available commands"));
    			   				break;
    			   			}else{
    			   				$sender->sendMessage($this->plugin->translateColors("&", "&cYou don't have permissions to use this command"));
    			   				break;
    			   			}
    			   			return true;
    			   		}
    			   	}else{
    			   		if($sender->hasPermission("chatlogin")){
    			   			$sender->sendMessage($this->plugin->translateColors("&", "&7// &bAvailable Commands &7\\\\"));
    			   			$sender->sendMessage($this->plugin->translateColors("&", "&9/chatlogin help &b-> &7Show help about this plugin"));
    			   			$sender->sendMessage($this->plugin->translateColors("&", "&9/chatlogin info &b-> &7Show info about this plugin"));
    			   			$sender->sendMessage($this->plugin->translateColors("&", "&9/chatlogin reload &b-> &7Reload the config"));
    			   			break;
    			   		}else{
    			   			$sender->sendMessage($this->plugin->translateColors("&", "&cYou don't have permissions to use this command"));
    			   			break;
    			   			}
    			   		return true;
    			   	}
    		}
    	return true;
    }
    
}
?><?php

/*
 * ChatLogin (v1.4) by EvolSoft
 * Developer: EvolSoft (Flavius12)
 * Website: http://www.evolsoft.tk
 * Date: 17/01/2015 11:37 AM (UTC)
 * Copyright & License: (C) 2015-2016 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/ChatLogin/blob/master/LICENSE)
 */

namespace ChatLogin;

use pocketmine\event\Listener;
use pocketmine\event\player\PlayerChatEvent;
use pocketmine\event\player\PlayerJoinEvent;
use pocketmine\event\player\PlayerLoginEvent;
use pocketmine\Player;

use ServerAuth\ServerAuth;

class EventListener implements Listener {

	public function __construct(Main $plugin){
		$this->plugin = $plugin;
	}
	
	public function onPlayerLogin(PlayerLoginEvent $event){
		if(isset($this->plugin->confirm_users[strtolower($event->getPlayer()->getName())])){
			unset($this->plugin->confirm_users[strtolower($event->getPlayer()->getName())]);
		}
		ServerAuth::getAPI()->enableLoginMessages(false);
		ServerAuth::getAPI()->enableRegisterMessages(false);
	}
	
	/**
	 * @param PlayerJoinEvent $event
	 * 
	 * @priority HIGHEST
	 */
	public function onPlayerJoin(PlayerJoinEvent $event){
		$player = $event->getPlayer();
		$cfg = $this->plugin->getConfig()->getAll();	
		$prefix = "";
		if($cfg["show-prefix"]){
			$prefix = Main::PREFIX;
		}
		if(!ServerAuth::getAPI()->isPlayerRegistered($player->getName())){
			$player->sendMessage($this->plugin->translateColors("&", $prefix . $cfg["register-message"]));
		}elseif(!ServerAuth::getAPI()->isPlayerAuthenticated($player)){
			$player->sendMessage($this->plugin->translateColors("&", $prefix . $cfg["login-message"]));
		}
	}
	
	public function onPlayerChat(PlayerChatEvent $event){
		$player = $event->getPlayer();
		$cfg = $this->plugin->getConfig()->getAll();
		$prefix = "";
		if($cfg["show-prefix"]){
			$prefix = Main::PREFIX;
		}
		if(!ServerAuth::getAPI()->isPlayerRegistered($player->getName())){
			if($player->hasPermission("chatlogin.register")){
				//Check if confirmation is required
				if($cfg["password-confirm-required"]){
					if(!isset($this->plugin->confirm_users[strtolower($player->getName())])){
						$this->plugin->confirm_users[strtolower($player->getName())] = $event->getMessage();
						$player->sendMessage($this->plugin->translateColors("&", $prefix . $cfg["register-confirm-message"]));
					}else{
						//Check passwords
						if($this->plugin->confirm_users[strtolower($player->getName())] == $event->getMessage()){
							unset($this->plugin->confirm_users[strtolower($player->getName())]);
							$status = ServerAuth::getAPI()->registerPlayer($player, $event->getMessage());
							if($status == ServerAuth::SUCCESS){
								ServerAuth::getAPI()->authenticatePlayer($player, $event->getMessage());
								$player->sendMessage($this->plugin->translateColors("&", $prefix . ServerAuth::getAPI()->chlang["register"]["register-success"]));
							}elseif($status == ServerAuth::ERR_USER_ALREADY_REGISTERED){
								$player->sendMessage($this->plugin->translateColors("&", $prefix . ServerAuth::getAPI()->chlang["register"]["already-registered"]));
							}elseif($status == ServerAuth::ERR_PASSWORD_TOO_SHORT){
								$player->sendMessage($this->plugin->translateColors("&", $prefix . ServerAuth::getAPI()->chlang["errors"]["password-too-short"]));
								$player->sendMessage($this->plugin->translateColors("&", $prefix . $cfg["register-message"]));
							}elseif($status == ServerAuth::ERR_PASSWORD_TOO_LONG){
								$player->sendMessage($this->plugin->translateColors("&", $prefix . ServerAuth::getAPI()->chlang["errors"]["password-too-long"]));
								$player->sendMessage($this->plugin->translateColors("&", $prefix . $cfg["register-message"]));
							}elseif($status == ServerAuth::ERR_MAX_IP_REACHED){
								$player->sendMessage($this->plugin->translateColors("&", $prefix . ServerAuth::getAPI()->chlang["errors"]["max-ip-reached"]));
							}elseif($status == ServerAuth::CANCELLED){
								$player->sendMessage($this->plugin->translateColors("&", $prefix . ServerAuth::getAPI()->getCancelledMessage()));
							}else{
								$player->sendMessage($this->plugin->translateColors("&", $prefix . ServerAuth::getAPI()->chlang["errors"]["generic"]));
								$player->sendMessage($this->plugin->translateColors("&", $prefix . $cfg["register-message"]));
							}
						}else{
							unset($this->plugin->confirm_users[strtolower($player->getName())]);
							$player->sendMessage($this->plugin->translateColors("&", $prefix .  ServerAuth::getAPI()->chlang["errors"]["password-no-match"]));
							$player->sendMessage($this->plugin->translateColors("&", $prefix . $cfg["register-message"]));
						}
					}
				}else{
					$status = ServerAuth::getAPI()->registerPlayer($player, $event->getMessage());
					if($status == ServerAuth::SUCCESS){
						ServerAuth::getAPI()->authenticatePlayer($player, $event->getMessage());
						$player->sendMessage($this->plugin->translateColors("&", $prefix . ServerAuth::getAPI()->chlang["register"]["register-success"]));
					}elseif($status == ServerAuth::ERR_USER_ALREADY_REGISTERED){
						$player->sendMessage($this->plugin->translateColors("&", $prefix . ServerAuth::getAPI()->chlang["register"]["already-registered"]));
					}elseif($status == ServerAuth::ERR_PASSWORD_TOO_SHORT){
						$player->sendMessage($this->plugin->translateColors("&", $prefix . ServerAuth::getAPI()->chlang["errors"]["password-too-short"]));
						$player->sendMessage($this->plugin->translateColors("&", $prefix . $cfg["register-message"]));
					}elseif($status == ServerAuth::ERR_PASSWORD_TOO_LONG){
						$player->sendMessage($this->plugin->translateColors("&", $prefix . ServerAuth::getAPI()->chlang["errors"]["password-too-long"]));
						$player->sendMessage($this->plugin->translateColors("&", $prefix . $cfg["register-message"]));
					}elseif($status == ServerAuth::ERR_MAX_IP_REACHED){
						$player->sendMessage($this->plugin->translateColors("&", $prefix . ServerAuth::getAPI()->chlang["errors"]["max-ip-reached"]));
					}elseif($status == ServerAuth::CANCELLED){
						$player->sendMessage($this->plugin->translateColors("&", $prefix . ServerAuth::getAPI()->getCancelledMessage()));
					}else{
						$player->sendMessage($this->plugin->translateColors("&", $prefix . ServerAuth::getAPI()->chlang["errors"]["generic"]));
						$player->sendMessage($this->plugin->translateColors("&", $prefix . $cfg["register-message"]));
					}
				}
			}else{
				$player->sendMessage($this->plugin->translateColors("&", $prefix . $cfg['no-register-permissions']));
			}
			$event->setMessage("");
			$event->setCancelled(true);
		}elseif(!ServerAuth::getAPI()->isPlayerAuthenticated($player)){
			if($player->hasPermission("chatlogin.login")){
				$status = ServerAuth::getAPI()->authenticatePlayer($player, $event->getMessage());
				if($status == ServerAuth::SUCCESS){
					$player->sendMessage($this->plugin->translateColors("&", $prefix . ServerAuth::getAPI()->chlang["login"]["login-success"]));
				}elseif($status == ServerAuth::ERR_WRONG_PASSWORD){
					$player->sendMessage($this->plugin->translateColors("&", $prefix . ServerAuth::getAPI()->chlang["errors"]["wrong-password"]));
					$player->sendMessage($this->plugin->translateColors("&", $prefix . $cfg["login-message"]));
				}elseif($status == ServerAuth::ERR_USER_ALREADY_AUTHENTICATED){
					$player->sendMessage($this->plugin->translateColors("&", $prefix . ServerAuth::getAPI()->chlang["login"]["already-login"]));
				}elseif($status == ServerAuth::ERR_USER_NOT_REGISTERED){
					$player->sendMessage($this->plugin->translateColors("&", $prefix . ServerAuth::getAPI()->chlang["errors"]["user-not-registered"]));
				}elseif($status == ServerAuth::CANCELLED){
    				$player->sendMessage($this->plugin->translateColors("&", $prefix . ServerAuth::getAPI()->getCancelledMessage()));
    			}else{
					$player->sendMessage($this->plugin->translateColors("&", $prefix . ServerAuth::getAPI()->chlang["errors"]["generic"]));
					$player->sendMessage($this->plugin->translateColors("&", $prefix . $cfg["login-message"]));
				}
			}else{
				$player->sendMessage($this->plugin->translateColors("&", $prefix . $cfg['no-login-permissions']));
			}
			$event->setMessage("");
			$event->setCancelled(true);
		}
	}
}
?>