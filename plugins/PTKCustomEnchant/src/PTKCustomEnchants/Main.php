<?php 

 namespace PTKCustomEnchants;
 
 use PTKCustomEnchants\Commands\CustomEnchantCommand;
 use PTKCustomEnchants\CustomEnchants\CustomEnchants;
 use PTKCustomEnchants\Tasks\CactusTask;
 use PTKCustomEnchants\Tasks\EffectTask;
 use PTKCustomEnchants\Tasks\ForcefieldTask;
 use PTKCustomEnchants\Tasks\JetpackTask;
 use PTKCustomEnchants\Tasks\MeditationTask;
 use PTKCustomEnchants\Tasks\ParachuteTask;
 use PTKCustomEnchants\Tasks\ProwlTask;
 use PTKCustomEnchants\Tasks\RadarTask;
 use PTKCustomEnchants\Tasks\SizeTask;
 use PTKCustomEnchants\Tasks\VacuumTask;
 use pocketmine\command\CommandSender;
 use pocketmine\entity\Entity;
 use pocketmine\item\Armor;
 use pocketmine\item\Item;
 use pocketmine\level\Position;
 use pocketmine\nbt\NBT;
 use pocketmine\nbt\tag\CompoundTag;
 use pocketmine\nbt\tag\ListTag;
 use pocketmine\nbt\tag\ShortTag;
 use pocketmine\plugin\PluginBase;
 use pocketmine\utils\TextFormat;
 
 class Main extends PluginBase { const MAX_LEVEL = 0;
 const NOT_COMPATIBLE = 1;
 const NOT_COMPATIBLE_WITH_OTHER_ENCHANT = 2;
 const MORE_THAN_ONE = 3;
 const ROMAN_CONVERSION_TABLE = [ 'M' => 1000, 'CM' => 900, 'D' => 500, 'CD' => 400, 'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' => 10, 'IX' => 9, 'V' => 5, 'IV' => 4, 'I' => 1 ];
 const COLOR_CONVERSION_TABLE = [ "BLACK" => TextFormat::BLACK, "DARK_BLUE" => TextFormat::DARK_BLUE, "DARK_GREEN" => TextFormat::DARK_GREEN, "DARK_AQUA" => TextFormat::DARK_AQUA, "DARK_RED" => TextFormat::DARK_RED, "DARK_PURPLE" => TextFormat::DARK_PURPLE, "GOLD" => TextFormat::GOLD, "GRAY" => TextFormat::GRAY, "DARK_GRAY" => TextFormat::DARK_GRAY, "BLUE" => TextFormat::BLUE, "GREEN" => TextFormat::GREEN, "AQUA" => TextFormat::AQUA, "RED" => TextFormat::RED, "LIGHT_PURPLE" => TextFormat::LIGHT_PURPLE, "YELLOW" => TextFormat::YELLOW, "WHITE" => TextFormat::WHITE ];
 public $berserkercd;
 public $bountyhuntercd;
 public $cloakingcd;
 public $endershiftcd;
 public $growcd;
 public $implantscd;
 public $jetpackcd;
 public $shrinkcd;
 public $vampirecd;
 public $growremaining;
 public $jetpackDisabled;
 public $shrinkremaining;
 public $flyremaining;
 public $forcefieldParticleTick;
 public $jetpackChargeTick;
 public $meditationTick;
 public $glowing;
 public $grew;
 public $flying;
 public $hallucination;
 public $implants;
 public $mined;
 public $nofall;
 public $overload;
 public $prowl;
 public $using;
 public $shrunk;
 public $enchants = [ CustomEnchants::ANTIKNOCKBACK => ["Anti Knockback", "Armor", "Damage", "Rare", 1, "Reduces knockback by 25% per armor piece"], CustomEnchants::AERIAL => ["Aerial", "Weapons", "Damage", "Common", 5, "Increases damage in air"], CustomEnchants::ARMORED => ["Armored", "Armor", "Damage", "Rare", 5, "Decreases sword damage by 20l%"], CustomEnchants::AUTOREPAIR => ["Autorepair", "Damageable", "Move", "Uncommon", 5, "Automatically repairs items when moving"], CustomEnchants::BACKSTAB => ["Backstab", "Weapons", "Damage", "Uncommon", 5, "When hitting from behind, you deal more damage."], CustomEnchants::BERSERKER => ["Berserker", "Armor", "Damaged", "Rare", 5, "Gives strength on low health"], CustomEnchants::BLESSED => ["Blessed", "Weapons", "Damage", "Uncommon", 3, "15l% (l = level) chance to remove bad effects"], CustomEnchants::BLIND => ["Blind", "Weapons", "Damage", "Common", 5, "Gives enemies blindness"], CustomEnchants::BOUNTYHUNTER => ["Bounty Hunter", "Bow", "Damage", "Uncommon", 5, "Collect bounties (items) when hitting enemies."], CustomEnchants::CACTUS => ["Cactus", "Armor", "Equip", "Rare", 1, "Poke people around you", "Poke people around you"], CustomEnchants::CHARGE => ["Charge", "Weapons", "Damage", "Uncommon", 5, "Increases damage when sprinting"], CustomEnchants::CLOAKING => ["Cloaking", "Armor", "Damaged", "Uncommon", 5, "Becomes invisible when hit"], CustomEnchants::CRIPPLINGSTRIKE => ["Cripple", "Weapons", "Damage", "Common", 5, "Gives enemies nausea and slowness"], CustomEnchants::CRIPPLE => ["Cripple", "Weapons", "Damage", "Common", 5, "Gives enemies nausea and slowness"], CustomEnchants::CURSED => ["Cursed", "Armor", "Damaged", "Uncommon", 5, "Gives wither to enemy when hit"], CustomEnchants::DEATHBRINGER => ["Deathbringer", "Weapons", "Damage", "Rare", 5, "Increases damage"], CustomEnchants::DISARMING => ["Disarming", "Weapons", "Damage", "Uncommon", 5, "10l% chance to disarm enemy"], CustomEnchants::DISARMOR => ["Disarmor", "Weapons", "Damage", "Uncommon", 5, "10l% chance to disarmor enemy"], CustomEnchants::DRILLER => ["Driller", "Tools", "Break", "Uncommon", 5, "Breaks a 3 by 3 by 1 + level"], CustomEnchants::DRUNK => ["Drunk", "Armor", "Damaged", "Rare", 5, "Gives slowness, mining fatigue, and nausea to enemy when hit"], CustomEnchants::ENDERSHIFT => ["Endershift", "Armor", "Damaged", "Rare", 5, "Gives speed and extra health when low on health"], CustomEnchants::ENERGIZING => ["Energizing", "Tools", "Break", "Uncommon", 5, "Gives haste when block is broken"], CustomEnchants::ENLIGHTED => ["Enlighted", "Armor", "Damaged", "Uncommon", 5, "Gives regeneration when hit"], CustomEnchants::ENRAGED => ["Enraged", "Chestplate", "Equip", "Rare", 5, "Strength per level"], CustomEnchants::EXPLOSIVE => ["Explosive", "Tools", "Break", "Rare", 5, "Cause an explosion when block is broken"], CustomEnchants::FARMER => ["Farmer", "Hoe", "Break", "Uncommon", 1, "Automatically regrows crops when harvested"], CustomEnchants::FERTILIZER => ["Fertilizer", "Hoe", "Interact", "Uncommon", 3, "Creates farmland in a level radius around the block"], CustomEnchants::FOCUSED => ["Focused", "Helmets", "Effect", "Uncommon", 5, "Nausea will affect you less"], CustomEnchants::FORCEFIELD => ["Forcefield", "Armor", "Equip", "Mythic", 1, "Deflects projectiles and living entities in a 0.75x (x = # of armor pieces)"], CustomEnchants::FROZEN => ["Frozen", "Armor", "Damaged", "Rare", 5, "Gives slowness to enemy when hit"], CustomEnchants::GEARS => ["Gears", "Boots", "Equip", "Uncommon", 5, "Gives speed"], CustomEnchants::GLOWING => ["Glowing", "Helmets", "Equip", "Common", 1, "Gives night vision"], CustomEnchants::GOOEY => ["Gooey", "Weapons", "Damage", "Uncommon", 5, "Flings enemy into the air"], CustomEnchants::GROW => ["Grow", "Armor", "Sneak", "Uncommon", 5, "Increases size on sneak (Must be wearing full set of Grow armor)"], CustomEnchants::HALLUCINATION => ["Hallucination", "Weapons", "Damage", "Mythic", 5, "5l% (l = level) chance of trapping enemies in a fake prison"], CustomEnchants::HARDENED => ["Hardened", "Armor", "Damaged", "Uncommon", 5, "Gives weakness to enemy when hit"], CustomEnchants::HASTE => ["Haste", "Tools", "Held", "Uncommon", 5, "Gives haste when held"], CustomEnchants::HARVEST => ["Harvest", "Hoe", "Break", "Uncommon", 3, "Harvest crops in a level radius around the block"], CustomEnchants::HEADHUNTER => ["Headhunter", "Bow", "Damage", "Uncommon", 5, "Increases damage if enemy is shot in the head"], CustomEnchants::HEALING => ["Healing", "Bow", "Damage", "Rare", 5, "Heals target when shot"], CustomEnchants::HEAVY => ["Heavy", "Armor", "Damage", "Rare", 5, "Decreases damage from axes by 20l%"], CustomEnchants::IMPLANTS => ["Implants", "Helmets", "Move", "Rare", 5, "Replenishes hunger and air"], CustomEnchants::JETPACK => ["Jetpack", "Boots", "Sneak", "Rare", 3, "Enable flying (you fly where you look) when you sneak."], CustomEnchants::JACKPOT => ["Jackpot", "Tools", "Break", "Mythic", 10, "10l% chance to increase the ore tier"], CustomEnchants::LIFESTEAL => ["Lifesteal", "Weapons", "Damage", "Common", 5, "Heals when damaging enemies"], CustomEnchants::LUMBERJACK => ["Lumberjack", "Axe", "Break", "Rare", 1, "Mines all logs connected to log when broken"], CustomEnchants::MEDITATION => ["Meditation", "Helmets", "Equip", "Uncommon", 5, "Replenish health and hunger every 20 seconds (half a hunger bar/heart per level)"], CustomEnchants::MOLTEN => ["Molten", "Armor", "Damaged", "Rare", 5, "Sets enemy on fire when hit"], CustomEnchants::OVERLOAD => ["Overload", "Armor", "Equip", "Mythic", 3, "Gives 1 extra heart per level per armor piece"], CustomEnchants::OXYGENATE => ["Oxygenate", "Tools", "Break", "Uncommon", 1, "Breathe underwater when held"], CustomEnchants::PARACHUTE => ["Parachute", "Chestplate", "Equip", "Uncommon", 1, "Slows your fall (above 3 blocks)s"], CustomEnchants::PARALYZE => ["Paralyze", "Bow", "Damage", "Rare", 5, "Gives slowness, blindness, and weakness"], CustomEnchants::PIERCING => ["Piercing", "Bow", "Damage", "Rare", 5, "Ignores armor when dealing damage"], CustomEnchants::POISON => ["Poison", "Weapons", "Damage", "Uncommon", 5, "Poisons enemies"], CustomEnchants::POISONED => ["Poisoned", "Armor", "Damaged", "Uncommon", 5, "Poisons enemy when hit"], CustomEnchants::PROWL => ["Prowl", "Chestplate", "Equip", "Rare", 1, "Goes invisible when sneaking, gives slowness"], CustomEnchants::QUICKENING => ["Quickening", "Tools", "Break", "Uncommon", 5, "Gives speed when block is broken"], CustomEnchants::RADAR => ["Radar", "Compass", "Inventory", "Rare", 5, "Points to nearest player in a 50l (l = level) range."], CustomEnchants::REVIVE => ["Revive", "Armor", "Death", "Rare", 5, "Will revive you when you die. (will remove enchantment)"], CustomEnchants::REVULSION => ["Revulsion", "Armor", "Damaged", "Uncommon", 5, "Gives nausea to enemy when hit"], CustomEnchants::SELFDESTRUCT => ["Self Destruct", "Armor", "Damaged", "Rare", 5, "Spawn TNT when you die."], CustomEnchants::SHRINK => ["Shrink", "Armor", "Sneak", "Uncommon", 2, "Decreases size on sneak (Must be wearing full set of Shrink armor)"], CustomEnchants::SHUFFLE => ["Shuffle", "Bow", "Damage", "Rare", 1, "Switches position with target"], CustomEnchants::SMELTING => ["Smelting", "Tools", "Break", "Uncommon", 1, "Automatically smelts drops when broken"], CustomEnchants::SOULBOUND => ["Soulbound", "Global", "Death", "Mythic", 1, "Keeps item after death (will remove enchantment)"], CustomEnchants::SPRINGS => ["Springs", "Boots", "Equip", "Uncommon", 5, "Gives a jump boost"], CustomEnchants::STOMP => ["Stomp", "Boots", "Fall_Damage", "Uncommon", 5, "Deal part of fall damage to enemy when taking fall damage"], CustomEnchants::TANK => ["Tank", "Armor", "Damage", "Uncommon", 5, "Spawn TNT when you die."], CustomEnchants::TELEPATHY => ["Telepathy", "Tools", "Break", "Rare", 1, "Automatically puts drops in inventory."], CustomEnchants::VACUUM => ["Vacuum", "Chestplate", "Equip", "Rare", 3, "Suck up items in a 3l radius"], CustomEnchants::VAMPIRE => ["Vampire", "Weapons", "Damage", "Uncommon", 1, "Heals by part of damage dealt"], CustomEnchants::WITHER => ["Wither", "Weapons", "Damage", "Uncommon", 5, "Gives enemies wither"] ];
 public function onEnable() { if (!$this->isSpoon()) { $this->initCustomEnchants();
 $this->saveDefaultConfig();
 $this->jetpackDisabled = $this->getConfig()->getNested("jetpack.disabled") ?? [];
 if (count($this->jetpackDisabled) > 0) { $this->getLogger()->info(TextFormat::RED . "Jetpack is currently disabled in the levels " . implode(", ", $this->jetpackDisabled) . ".");
 } $this->getServer()->getCommandMap()->register("customenchant", new CustomEnchantCommand("customenchant", $this));
 $this->getServer()->getScheduler()->scheduleRepeatingTask(new CactusTask($this), 10);
 $this->getServer()->getScheduler()->scheduleRepeatingTask(new ForcefieldTask($this), 1);
 $this->getServer()->getScheduler()->scheduleRepeatingTask(new EffectTask($this), 5);
 $this->getServer()->getScheduler()->scheduleRepeatingTask(new JetpackTask($this), 1);
 $this->getServer()->getScheduler()->scheduleRepeatingTask(new MeditationTask($this), 20);
 $this->getServer()->getScheduler()->scheduleRepeatingTask(new ParachuteTask($this), 2);
 $this->getServer()->getScheduler()->scheduleRepeatingTask(new ProwlTask($this), 1);
 $this->getServer()->getScheduler()->scheduleRepeatingTask(new RadarTask($this), 1);
 $this->getServer()->getScheduler()->scheduleRepeatingTask(new SizeTask($this), 20);
 $this->getServer()->getScheduler()->scheduleRepeatingTask(new VacuumTask($this), 1);
 $this->getServer()->getPluginManager()->registerEvents(new EventListener($this), $this);
 $this->getLogger()->info(TextFormat::GREEN . "Enabled.");
 } } public function isSpoon() { if ($this->getServer()->getName() == "PocketMine-MP") { $this->getLogger()->error("Pig doesn't like spoons. Due to this, the plugin will not function until you are using PMMP.");
 return true;
 } if ($this->getDescription()->getAuthors() !== ["PTK-KienPham"] || $this->getDescription()->getName() !== "PTKCustomEnchants") { $this->getLogger()->error("You are not using the original version of this plugin (PTKCustomEnchants) by PTK-KienPham/MCPEPIG.");
 return true;
 } return false;
 } public function initCustomEnchants() { CustomEnchants::init();
 foreach ($this->enchants as $id => $data) { $ce = $this->translateDataToCE($id, $data);
 CustomEnchants::registerEnchants($id, $ce);
 } } public function registerEnchantment($id, $name, $type, $trigger, $rarity, $maxlevel) { $data = [$name, $type, $trigger, $rarity, $maxlevel];
 $this->enchants[$id] = $data;
 $ce = $this->translateDataToCE($id, $data);
 CustomEnchants::registerEnchants($id, $ce);
 } public function translateDataToCE($id, $data) { $slot = CustomEnchants::SLOT_NONE;
 switch ($data[1]) { case "Global": $slot = CustomEnchants::SLOT_ALL;
 break;
 case "Weapons": $slot = CustomEnchants::SLOT_SWORD;
 break;
 case "Bow": $slot = CustomEnchants::SLOT_BOW;
 break;
 case "Tools": $slot = CustomEnchants::SLOT_TOOL;
 break;
 case "Pickaxe": $slot = CustomEnchants::SLOT_PICKAXE;
 break;
 case "Axe": $slot = CustomEnchants::SLOT_AXE;
 break;
 case "Shovel": $slot = CustomEnchants::SLOT_SHOVEL;
 break;
 case "Hoe": $slot = CustomEnchants::SLOT_HOE;
 break;
 case "Armor": $slot = CustomEnchants::SLOT_ARMOR;
 break;
 case "Helmets": $slot = CustomEnchants::SLOT_HEAD;
 break;
 case "Chestplate": $slot = CustomEnchants::SLOT_TORSO;
 break;
 case "Leggings": $slot = CustomEnchants::SLOT_LEGS;
 break;
 case "Boots": $slot = CustomEnchants::SLOT_FEET;
 break;
 case "Compass": $slot = CustomEnchants::SLOT_COMPASS;
 break;
 } $rarity = CustomEnchants::RARITY_COMMON;
 switch ($data[3]) { case "Common": $rarity = CustomEnchants::RARITY_COMMON;
 break;
 case "Uncommon": $rarity = CustomEnchants::RARITY_UNCOMMON;
 break;
 case "Rare": $rarity = CustomEnchants::RARITY_RARE;
 break;
 case "Mythic": $rarity = CustomEnchants::RARITY_MYTHIC;
 break;
 } $ce = new CustomEnchants($id, $data[0], $rarity, CustomEnchants::ACTIVATION_SELF, $slot);
 return $ce;
 } public function getEnchantment(Item $item, $id) { if (!$item->hasEnchantments()) { return null;
 } foreach ($item->getNamedTag()->ench as $entry) { if ($entry["id"] === $id) { $e = CustomEnchants::getEnchantment($entry["id"]);
 $e->setLevel($entry["lvl"]);
 return $e;
 } } return null;
 } public function addEnchantment(Item $item, $enchants, $levels, $check = true, CommandSender $sender = null) { if (!is_array($enchants)) { $enchants = [$enchants];
 } if (!is_array($levels)) { $levels = [$levels];
 } if (count($enchants) > count($levels)) { for ($i = 0;
 $i <= count($enchants) - count($levels);
 $i++) { $levels[] = 1;
 } } $combined = array_combine($enchants, $levels);
 foreach ($enchants as $enchant) { $level = $combined[$enchant];
 if (!$enchant instanceof CustomEnchants) { if (is_numeric($enchant)) { $enchant = CustomEnchants::getEnchantment((int)$enchant);
 } else { $enchant = CustomEnchants::getEnchantmentByName($enchant);
 } } if ($enchant == null) { if ($sender !== null) { $sender->sendMessage("§b[§eCustom§dEnchants§b] §r".TextFormat::RED . "Phù Phép Không Tồn Tại.");
 } continue;
 } $result = $this->canBeEnchanted($item, $enchant, $level);
 if ($result === true || $check !== true) { $enchant->setLevel($level);
 if (!$item->hasCompoundTag()) { $tag = new CompoundTag("", []);
 } else { $tag = $item->getNamedTag();
 } if (!isset($tag->ench)) { $tag->ench = new ListTag("ench", []);
 $tag->ench->setTagType(NBT::TAG_Compound);
 } $found = false;
 foreach ($tag->ench as $k => $entry) { if ($entry["id"] === $enchant->getId()) { $tag->ench->{$k} = new CompoundTag("", [ "id" => new ShortTag("id", $enchant->getId()), "lvl" => new ShortTag("lvl", $enchant->getLevel()) ]);
 $item->setNamedTag($tag);
 $item->setCustomName(str_replace($this->getRarityColor($enchant->getRarity()) . $enchant->getName() . " " . $this->getRomanNumber($entry["lvl"]), $this->getRarityColor($enchant->getRarity()) . $enchant->getName() . " " . $this->getRomanNumber($enchant->getLevel()), $item->getName()));
 $found = true;
 break;
 } } if (!$found) { $tag->ench->{count($tag->ench->getValue()) + 1} = new CompoundTag($enchant->getName(), [ "id" => new ShortTag("id", $enchant->getId()), "lvl" => new ShortTag("lvl", $enchant->getLevel()) ]);
 $level = $this->getRomanNumber($enchant->getLevel());
 $item->setNamedTag($tag);
 $item->setCustomName($item->getName() . "\n" . $this->getRarityColor($enchant->getRarity()) . $enchant->getName() . " " . $level);
 } if ($sender !== null) { $sender->sendMessage("§b[§eCustom§dEnchants§b] §r".TextFormat::GREEN . "Phù Phép Thành Công.");
 } continue;
 } if ($sender !== null) { if ($result == self::NOT_COMPATIBLE) { $sender->sendMessage("§b[§eCustom§dEnchants§b] §r".TextFormat::RED . "Phù Phép Này Không Phù Hợp Với Vật Phẩm Bạn Đang Cầm.");
 } if ($result == self::MAX_LEVEL) { $sender->sendMessage("§b[§eCustom§dEnchants§b] §r".TextFormat::RED . "Cấp Độ Cao Nhất Của Phù Phép Là " . $this->getEnchantMaxLevel($enchant) . ".");
 } if ($result == self::MORE_THAN_ONE) { $sender->sendMessage("§b[§eCustom§dEnchants§b] §r".TextFormat::RED . "Bạn Chỉ Có Thể Phù 1 Phù Phép Mỗi Lần.");
 } } continue;
 } return $item;
 } public function removeEnchantment(Item $item, CustomEnchants $enchant, $level = -1) { if (!$item->hasEnchantments()) { return false;
 } $tag = $item->getNamedTag();
 $item = Item::get($item->getId(), $item->getDamage(), $item->getCount());
 foreach ($tag->ench as $k => $enchantment) { if (($enchantment["id"] == $enchant->getId() && ($enchantment["lvl"] == $level || $level == -1)) !== true) { $item = $this->addEnchantment($item, $enchantment["id"], $enchantment["lvl"], true);
 } } return $item;
 } public function getEnchantType(CustomEnchants $enchant) { foreach ($this->enchants as $id => $data) { if ($enchant->getId() == $id) { return $data[1];
 } } return "Unknown";
 } public function getEnchantRarity(CustomEnchants $enchant) { foreach ($this->enchants as $id => $data) { if ($enchant->getId() == $id) { return $data[3];
 } } return "Common";
 } public function getEnchantMaxLevel(CustomEnchants $enchant) { foreach ($this->enchants as $id => $data) { if ($enchant->getId() == $id) { return $data[4];
 } } return 5;
 } public function getEnchantDescription(CustomEnchants $enchant) { foreach ($this->enchants as $id => $data) { if ($enchant->getId() == $id) { return $data[5];
 } } return "Unknown";
 } public function sortEnchants() { $sorted = [];
 foreach ($this->enchants as $id => $data) { $type = $data[1];
 if (!isset($sorted[$type])) { $sorted[$type] = [$data[0]];
 } else { array_push($sorted[$type], $data[0]);
 } } return $sorted;
 } public function getRomanNumber($integer) { $romanString = "";
 while ($integer > 0) { foreach (self::ROMAN_CONVERSION_TABLE as $rom => $arb) { if ($integer >= $arb) { $integer -= $arb;
 $romanString .= $rom;
 break;
 } } } return $romanString;
 } public function getRarityColor($rarity) { switch ($rarity) { case CustomEnchants::RARITY_COMMON: $color = strtoupper($this->getConfig()->getNested("color.common"));
 return $this->translateColorNameToTextFormat($color) == false ? TextFormat::YELLOW : $this->translateColorNameToTextFormat($color);
 case CustomEnchants::RARITY_UNCOMMON: $color = strtoupper($this->getConfig()->getNested("color.uncommon"));
 return $this->translateColorNameToTextFormat($color) == false ? TextFormat::BLUE : $this->translateColorNameToTextFormat($color);
 case CustomEnchants::RARITY_RARE: $color = strtoupper($this->getConfig()->getNested("color.rare"));
 return $this->translateColorNameToTextFormat($color) == false ? TextFormat::GOLD : $this->translateColorNameToTextFormat($color);
 case CustomEnchants::RARITY_MYTHIC: $color = strtoupper($this->getConfig()->getNested("color.mythic"));
 return $this->translateColorNameToTextFormat($color) == false ? TextFormat::LIGHT_PURPLE : $this->translateColorNameToTextFormat($color);
 default: return TextFormat::GRAY;
 } } public function translateColorNameToTextFormat($color) { foreach (self::COLOR_CONVERSION_TABLE as $name => $textformat) { if ($color == $name) { return $textformat;
 } } return false;
 } public function canBeEnchanted(Item $item, CustomEnchants $enchant, $level) { $type = $this->getEnchantType($enchant);
 if ($this->getEnchantMaxLevel($enchant) < $level) { return self::MAX_LEVEL;
 } if ($item->getCount() > 1) { return self::MORE_THAN_ONE;
 } switch ($type) { case "Global": return true;
 case "Damageable": if ($item->getMaxDurability() !== 0) { return true;
 } break;
 case "Weapons": if ($item->isSword() !== false || $item->isAxe() || $item->getId() == Item::BOW) { return true;
 } break;
 case "Bow": if ($item->getId() == Item::BOW) { return true;
 } break;
 case "Tools": if ($item->isPickaxe() || $item->isAxe() || $item->isShovel() || $item->isShears()) { return true;
 } break;
 case "Pickaxe": if ($item->isPickaxe()) { return true;
 } break;
 case "Axe": if ($item->isAxe()) { return true;
 } break;
 case "Shovel": if ($item->isShovel()) { return true;
 } break;
 case "Hoe": if ($item->isHoe()) { return true;
 } break;
 case "Armor": if ($item instanceof Armor) { return true;
 } break;
 case "Helmets": switch ($item->getId()) { case Item::LEATHER_CAP: case Item::CHAIN_HELMET: case Item::IRON_HELMET: case Item::GOLD_HELMET: case Item::DIAMOND_HELMET: return true;
 } break;
 case "Chestplate": switch ($item->getId()) { case Item::LEATHER_TUNIC: case Item::CHAIN_CHESTPLATE;
 case Item::IRON_CHESTPLATE: case Item::GOLD_CHESTPLATE: case Item::DIAMOND_CHESTPLATE: case Item::ELYTRA: return true;
 } break;
 case "Leggings": switch ($item->getId()) { case Item::LEATHER_PANTS: case Item::CHAIN_LEGGINGS: case Item::IRON_LEGGINGS: case Item::GOLD_LEGGINGS: case Item::DIAMOND_LEGGINGS: return true;
 } break;
 case "Boots": switch ($item->getId()) { case Item::LEATHER_BOOTS: case Item::CHAIN_BOOTS: case Item::IRON_BOOTS: case Item::GOLD_BOOTS: case Item::DIAMOND_BOOTS: return true;
 } break;
 case "Compass": if ($item->getId() == Item::COMPASS) { return true;
 } break;
 } return self::NOT_COMPATIBLE;
 } public function checkBlocks(Position $pos, $ids, $deep = 0) { if (!is_array($ids)) { $ids = [$ids];
 } if ($deep == 0) { $block = $pos->getLevel()->getBlock($pos);
 if (!in_array($block->getId(), $ids)) { return false;
 } } else { for ($i = 0;
 $deep < 0 ? $i >= $deep : $i <= $deep;
 $deep < 0 ? $i-- : $i++) { $block = $pos->getLevel()->getBlock($pos->subtract(0, $i));
 if (!in_array($block->getId(), $ids)) { return false;
 } } } return true;
 } }